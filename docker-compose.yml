version: "3.9"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: auction-service
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - DEV=FALSE
      - RABBITMQ_HOST=rabbitmq
      - DATABASE_URL= postgresql://postgres:password@postgres-db:5432/auction_service_db
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - app-network

  rabbitmq:
    image: masstransit/rabbitmq
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./initmq/definitions.json:/etc/rabbitmq/definitions:ro
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./initmq/definitions.json:/etc/rabbitmq/definitions:ro
    networks:
      - app-network

  postgres-db:
    image: postgres:latest
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
    volumes:
      - ./initdb:/docker-entrypoint-initdb.d/:ro
    ports:
      - "5433:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

networks:
  app-network:
    driver: bridge
